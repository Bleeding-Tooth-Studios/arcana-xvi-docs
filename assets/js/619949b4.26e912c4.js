"use strict";(self.webpackChunkarcana_xvi_docs=self.webpackChunkarcana_xvi_docs||[]).push([[6377],{327:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"intro/sharedcomponents","title":"Shared-Components","description":"General Methods","source":"@site/docs/intro/sharedcomponents.md","sourceDirName":"intro","slug":"/intro/sharedcomponents","permalink":"/arcana-xvi-docs/docs/intro/sharedcomponents","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro/sharedcomponents.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Modded Flamework","permalink":"/arcana-xvi-docs/docs/intro/flamework"},"next":{"title":"Components","permalink":"/arcana-xvi-docs/docs/category/components"}}');var a=n(4848),o=n(8453);const i={},s="Shared-Components",c={},l=[{value:"General Methods",id:"general-methods",level:2},{value:"Client Methods",id:"client-methods",level:2},{value:"Server Methods",id:"server-methods",level:2},{value:"Examples",id:"examples",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"shared-components",children:"Shared-Components"})}),"\n",(0,a.jsx)(t.h2,{id:"general-methods",children:"General Methods"}),"\n",(0,a.jsx)(t.p,{children:"Returns current component state"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"const state = component.GetState();\nprint(`Current value: ${state.value}`);\n"})}),"\n",(0,a.jsx)(t.p,{children:"Updates component state and triggers updates"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"component.Dispatch({ \n    ...component.GetState(),\n    value: 42 \n});\n"})}),"\n",(0,a.jsx)(t.p,{children:"State change subscription methods"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"Subscribe(listener: (state: S, prevState: S) => void): () => void\n"})}),"\n",(0,a.jsx)(t.p,{children:"Example:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"component.Subscribe(\n\tstate => state.counter,\n\t(value, prevValue) => print(`Counter changed: ${prevValue}\u2192${value}`)\n);\n"})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.h2,{id:"client-methods",children:"Client Methods"}),"\n",(0,a.jsx)(t.p,{children:"Checks if component is connected to network"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'if (component.GetIsConnected()) {\n  print("Component is actively connected!");\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"Establishes network connection to the server"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"component.Connect(); \n"})}),"\n",(0,a.jsx)(t.p,{children:"Terminates network connection to the server"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"component.Disconnect(); \n"})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.h2,{id:"server-methods",children:"Server Methods"}),"\n",(0,a.jsx)(t.p,{children:"Fired when client component disconnects"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"OnDisconnected() {\n\t...\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"Fired when new player connects"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"OnConnectedPlayer(player: Player) {\n\t...\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"Fired when player disconnects"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"OnDisconnectedPlayer(player: Player) {\n\t...\n}\n"})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.p,{children:"Example Shared Component"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"// shared/components/counter.ts\n\n// define state\ninterface State {\n   \tvalue: number;\n}\n\n@Component()\nexport class CounterComponent extends SharedComponent<State> {\n  \tprotected state = { value: 0 };  // Initial state\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'//server\n@Component({ tag: "Counter" })\nexport class ServerCounterComponent extends CounterComponent implements OnStart {\n  \tpublic onStart() {\n\t\ttask.spawn(() => {\n\t\t\twhile (task.wait(3)) {\n\t\t\t\tthis.Increment();\n\t\t\t}\n\t\t});\n\t}\n\n\t@Action() // State modifier\n\tprivate Increment() {\n\t\treturn {\n\t\t\t...this.state,\n\t\t\tvalue: this.state.value + 1,\n\t\t};\n\t}\n}\n'})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'// client/components/counter.ts  \n@Component({\n\ttag: "Counter",\n})\nexport class ClientCounterComponent extends CounterComponent {\n\t@Subscribe((state) => state.value)\n\tprivate onIncrement(newValue: number) {\n\t\tprint(`new value: ${newValue}`);\n\t}\n}\n'})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.p,{children:"Networking Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:"//shared\n@Component()\nexport class SomeSharedComponent extends SharedComponent<{}> {\n\tprotected state = {};\n\n\tprotected remotes = {\n\t\tClientEvent: SharedComponentNetwork.event<ServerToClient, [value: number]>(),\n\t\tServerEvent: SharedComponentNetwork.event<ClientToServer, [value: number]>(),\n\t\tAction: SharedComponentNetwork.action<[value: number], void>(),\n\t};\n}\n"})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'//server\n@Component({\n\ttag: "SomeSharedComponent",\n})\nexport class ServerComponent extends SomeSharedComponent implements OnStart {\n\tpublic onStart() {\n\t\tthis.remotes.ServerEvent.Connect((player, amount) => {\n\t\t\tprint(`value = ${amount}, player: ${player}`);\n\t\t});\n\n\t\tthis.remotes.Action.OnRequest((amount) => {\n\t\t\tprint(`Action: value = ${amount}`);\n\t\t});\n\n\t\ttask.wait(5);\n\t\tthis.remotes.ClientEvent.Broadcast(1);\n\t}\n}\n'})}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'// client\n@Component({\n\ttag: "SomeSharedComponent",\n})\nexport class ClientComponent extends SomeSharedComponent implements OnStart {\n\tpublic onStart() {\n\t\tthis.remotes.ClientEvent.Connect((amount: number) => {\n\t\t\tprint(`value = ${amount}`);\n\t\t});\n\t\tthis.remotes.ServerEvent.Fire(1);\n\t\tthis.remotes.Action(1);\n\t}\n}\n'})}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)("br",{}),"\n",(0,a.jsx)(t.p,{children:"Example for an equippableItems system created by a wonderful horse"}),"\n",(0,a.jsx)(t.p,{children:"SharedComponent"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { Component } from "@flamework/components";\nimport { CharacterRigR6 } from "@rbxts/promise-character";\nimport { SharedComponent } from "@rbxts/shared-components-flamework";\nimport { SharedComponentNetwork } from "@rbxts/shared-components-flamework/out/source/network";\nimport { WeaponObject } from "shared/types/objects/WeaponObject";\n\ninterface Attributes {}\n\ninterface State {\n\tequippingCharacter: CharacterRigR6 | undefined;\n}\n\n@Component()\nexport class SharedEquippable extends SharedComponent<State, Attributes, WeaponObject> {\n\tprotected state: State = {\n\t\tequippingCharacter: undefined,\n\t};\n\n\tprotected remotes = {\n\t\tupdateEquippingCharacter: SharedComponentNetwork.action<[character: CharacterRigR6 | undefined], void>(),\n\t};\n}\n\n'})}),"\n",(0,a.jsx)(t.p,{children:"ClientComponent"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { Component } from "@flamework/components";\nimport { OnStart } from "@flamework/core";\nimport { atom, subscribe } from "@rbxts/charm";\nimport Log from "@rbxts/log";\nimport Maid from "@rbxts/maid";\nimport { CharacterRigR6, promiseR6 } from "@rbxts/promise-character";\nimport { Players } from "@rbxts/services";\nimport { CharacterController } from "client/controllers/CharacterController";\nimport { ViewmodelController } from "client/controllers/ViewmodelController";\nimport isLocalPlayerCharacter from "client/util/isLocalPlayerCharacter";\nimport { SharedEquippable } from "shared/components/weapons/SharedEquippable";\nimport { ViewmodelObject } from "shared/types/assets/ViewmodelObject";\n\n@Component({ tag: "Equippable" })\nexport class ClientEquippable extends SharedEquippable implements OnStart {\n\tprivate maid = new Maid();\n\tprivate instanceDestroyedBinding = this.maid.GiveTask(\n\t\tthis.instance.Destroying.Connect(() => this.maid.DoCleaning()),\n\t);\n\tprivate viewmodelWeldMaid = new Maid(); // For viewmodel weld cleanup\n\n\tpublic currentCharacter = atom<CharacterRigR6 | undefined>(); //charm usage\n\n\tconstructor(\n\t\tprivate readonly viewmodelController: ViewmodelController,\n\t\tprivate readonly characterController: CharacterController,\n\t) {\n\t\tsuper();\n\t}\n\n\t/* -------------------------------- bindings -------------------------------- */\n\tprivate onInstanceEquip(mouse: Mouse) {\n\t\tconst parent = this.instance.Parent;\n\n\t\tassert(parent, "Equipped weapon has no parent");\n\t\tassert(parent.IsA("Model"), "Equipped weapon parent is not a model");\n\n\t\tpromiseR6(parent).then((character) => {\n\t\t\tthis.currentCharacter(character);\n\t\t\tthis.playEquipAnimation(character);\n\t\t});\n\t}\n\n\tprivate onInstanceUnequip() {\n\t\tthis.currentCharacter(undefined);\n\t}\n\n\tprivate onEquipStateChange(char: CharacterRigR6 | undefined) {\n\t\tthis.logEquip(char);\n\n\t\tif (char !== undefined && isLocalPlayerCharacter(char)) {\n\t\t\tthis.weldToViewmodel(this.viewmodelController.getViewmodel());\n\t\t} else {\n\t\t\tthis.unweldFromViewmodel();\n\t\t}\n\n\t\tthis.remotes.updateEquippingCharacter.Invoke(char);\n\t}\n\n\t/* ----------------------------- internal utils ----------------------------- */\n\tprivate logEquip(character: CharacterRigR6 | undefined) {\n\t\tLog.Debug("Equipped character: {character}", character);\n\t}\n\n\t/* ----------------------------- viewmodel utils ---------------------------- */\n\tprivate weldToViewmodel(viewmodel: ViewmodelObject): void {\n\t\tLog.Debug("Attempting to weld {tool} to viewmodel {viewmodel_name}", this.instance.Name, viewmodel.Name);\n\t\tconst toolModel = this.instance.handle.Clone();\n\t\ttoolModel.Parent = viewmodel;\n\n\t\tconst viewmodelWeld = this.instance.viewmodelWeld.Clone();\n\t\tviewmodelWeld.Parent = toolModel;\n\t\tviewmodelWeld.Part0 = viewmodel.RightArmLower;\n\t\tviewmodelWeld.Part1 = toolModel;\n\n\t\tLog.Info("Welded {tool} to viewmodel {viewmodel_name}", this.instance.Name, viewmodel.Name);\n\n\t\tthis.viewmodelWeldMaid.GiveTask(() => {\n\t\t\tLog.Debug("Destroying cloned tool model for {tool} from viewmodel", this.instance.Name);\n\t\t\ttoolModel.Destroy();\n\t\t});\n\t}\n\n\tprivate unweldFromViewmodel(): void {\n\t\tLog.Debug("Cleaning viewmodel welds for {tool}", this.instance.Name);\n\t\tthis.viewmodelWeldMaid.DoCleaning();\n\t}\n\n\tprivate playEquipAnimation(char: CharacterRigR6) {\n\t\tif (!isLocalPlayerCharacter(char)) return;\n\t\tconst track = this.viewmodelController\n\t\t\t.getViewmodelAnimator()\n\t\t\t.LoadAnimation(this.instance.animations.viewmodel.equip);\n\t\ttrack.Play();\n\t\ttrack.Stopped.Connect(track.Destroy);\n\t}\n\n\t/* ------------------------------- lifecycles ------------------------------- */\n\tonStart(): void {\n\t\t[\n\t\t\tthis.instance.Equipped.Connect(this.onInstanceEquip),\n\t\t\tthis.instance.Unequipped.Connect(this.onInstanceUnequip),\n\t\t\tsubscribe(this.currentCharacter, this.onEquipStateChange), //state changes to the atom\n\t\t\tthis.viewmodelWeldMaid.DoCleaning,\n\t\t].forEach((connection) => this.maid.GiveTask(connection));\n\t}\n}\n\n'})}),"\n",(0,a.jsx)(t.p,{children:"ServerComponent"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { Component } from "@flamework/components";\nimport { OnStart } from "@flamework/core";\nimport { produce } from "@rbxts/immut";\nimport Log from "@rbxts/log";\nimport Maid from "@rbxts/maid";\nimport { CharacterRigR6 } from "@rbxts/promise-character";\nimport { Action } from "@rbxts/shared-components-flamework";\nimport { SharedEquippable } from "shared/components/weapons/SharedEquippable";\n\n@Component({\n\ttag: "Equippable",\n})\nexport class ServerEquippable extends SharedEquippable implements OnStart {\n\t@Action()\n\tpublic updateEquippingCharacter(character: CharacterRigR6 | undefined): typeof this.state {\n\t\treturn produce(this.state, (draft) => {\n\t\t\tdraft.equippingCharacter = character;\n\t\t});\n\t}\n\n\tprivate maid = new Maid();\n\tprivate characterWeldMaid = new Maid(); // For character weld cleanup\n\n\tprivate weldToCharacter(equippingCharacter: CharacterRigR6): void {\n\t\tconst characterWeld = this.instance.characterWeld.Clone();\n\t\tcharacterWeld.Parent = this.instance.handle;\n\t\tcharacterWeld.Part0 = equippingCharacter["Right Arm"];\n\t\tcharacterWeld.Part1 = this.instance.handle;\n\n\t\tLog.Debug("Created weld {weld} for {char} on server", characterWeld, equippingCharacter);\n\n\t\tthis.characterWeldMaid.GiveTask(() => {\n\t\t\tLog.Debug("Destroying character weld for {tool} on server", this.instance.Name);\n\t\t\tcharacterWeld.Destroy();\n\t\t});\n\t}\n\n\tprivate unweldFromCharacter(): void {\n\t\tLog.Debug("Cleaning character welds for {tool} on server", this.instance.Name);\n\t\tthis.characterWeldMaid.DoCleaning();\n\t}\n\n\tprivate onStateChange(newState: typeof this.state): void {\n\t\tthis.unweldFromCharacter(); // Clean previous weld if any\n\t\tif (newState.equippingCharacter) {\n\t\t\tthis.weldToCharacter(newState.equippingCharacter);\n\t\t}\n\t}\n\n\tonStart(): void {\n\t\tthis.remotes.updateEquippingCharacter.OnRequest((player, character) =>\n\t\t\tthis.updateEquippingCharacter(character),\n\t\t);\n\n\t\tthis.maid.GiveTask(this.Subscribe((newState) => this.onStateChange(newState)));\n\n\t\tthis.maid.GiveTask(() => this.characterWeldMaid.DoCleaning());\n\t\tthis.maid.GiveTask(this.instance.Destroying.Connect(() => this.maid.DoCleaning()));\n\t}\n}\n\n'})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var r=n(6540);const a={},o=r.createContext(a);function i(e){const t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);