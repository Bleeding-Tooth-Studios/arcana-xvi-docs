"use strict";(self.webpackChunkarcana_xvi_docs=self.webpackChunkarcana_xvi_docs||[]).push([[8135],{3202:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/announcement_1-d94bacef1c1a72cb7069b8fd7984ffff.png"},3885:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"codesnippets/announcements","title":"Announcements","description":"Announcements are a one way communication method controlled by the AnnouncerService.","source":"@site/docs/codesnippets/announcements.md","sourceDirName":"codesnippets","slug":"/codesnippets/announcements","permalink":"/arcana-xvi-docs/docs/codesnippets/announcements","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/codesnippets/announcements.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Dialogues","permalink":"/arcana-xvi-docs/docs/codesnippets/dialogues"}}');var a=t(4848),o=t(8453);const s={},i="Announcements",c={},l=[{value:"Features",id:"features",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"announcements",children:"Announcements"})}),"\n",(0,a.jsx)(n.p,{children:"Announcements are a one way communication method controlled by the AnnouncerService.\nAnnouncerService is a client-side singleton that handles announcement events fired by the server."}),"\n",(0,a.jsx)(n.p,{children:"They can be"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Specific to a player"}),"\n",(0,a.jsx)(n.li,{children:"Announced to a whole server"}),"\n",(0,a.jsx)(n.li,{children:"Globally announced to all running servers (centurion implementation to be added)"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"It's recommended not to put too much text on one announcement and separate them into shorter texts. They might cover the whole screen due to the flex behaviors"}),"\n",(0,a.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"typewriter effect, fade-in & fade-out"}),"\n",(0,a.jsx)(n.li,{children:"rich text support, flex display"}),"\n",(0,a.jsx)(n.li,{children:"display-time measured according to text length"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"announcement example",src:t(3202).A+"",width:"946",height:"731"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'// src/server/services/AnnouncerTestService.ts\nimport { Service, OnStart, Dependency } from "@flamework/core";\nimport { AnnouncerService } from "./AnnouncerService";\nimport { PlayerService } from "./PlayerService";\n\n@Service()\nexport class AnnouncerTestService implements OnStart {\n\tconstructor(private readonly playerService: PlayerService, private readonly announcerService: AnnouncerService) {}\n\n\tonStart() {\n\t\tthis.playerService.playerJoined.Connect((player) => {\n\t\t\tthis.handlePlayerJoined(player);\n\t\t});\n\n\t\tthis.playerService.getPlayers().forEach((player) => {\n\t\t\tthis.handlePlayerJoined(player);\n\t\t});\n\t}\n\n\tprivate handlePlayerJoined(player: Player) {\n\t\tprint(`Player ${player.Name} joined. Triggering test announcements.`);\n\n\t\tthis.announcerService.announcePlayer(\n\t\t\tplayer,\n\t\t\t`<font color="##632c12">Dev Will</font>`,\n\t\t\t`<b>after i applied some minor fixes, theres an error</b>\n\t\t\t"Object literal may only specify known properties, and \'Transparency\' does not exist in type \'Instance\'" on the line "fadeOutTween = TweenService.Create(\n\t\t\t{ Transparency: dialogTransparency }..."\n\t\t\t this argument is supposed to accept the instance that will be tweened. as in the textlabel, imagelabel, or frame\'s transparency `,\n\t\t);\n\n\t\t// --- Test Case 1: Basic Welcome Announcement with Rich Text ---\n\t\t// Uses AnnouncePlayer to target only the joining player.\n\t\tthis.announcerService.announcePlayer(\n\t\t\tplayer,\n\t\t\t\'<font color="#9e2e1c">Arve</font>\',\n\t\t\t`Greetings, <b>${player.Name}</b>! Kill yourself!`,\n\t\t);\n\n\t\t// --- Test Case 2: shake effect ---\n\t\tthis.announcerService.announcePlayer(\n\t\t\tplayer,\n\t\t\t`<font color="#400f0d">Dev Adrian</font>`,\n\t\t\t`<sh>This is for P1</sh>,`,\n\t\t);\n\n\t\t// --- Test Case 3: Global Server Announcement (uses MessagingService) ---\n\t\t// This will attempt to send to all active servers.\n\t\t// It requires MessagingService to be enabled for your game and might not show if you\'re only in Play Solo.\n\t\t// To see it in action, you\'ll need a live game server.\n\t\tthis.announcerService.announceGlobal("XXX", `This is a global announcement`);\n\t}\n}\n\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(6540);const a={},o=r.createContext(a);function s(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);